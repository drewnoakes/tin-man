/* 
 * Copyright Drew Noakes
 *
 * This file is part of TinMan.
 *
 * TinMan is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TinMan is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with TinMan.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * INFO ON Coco/R C# here: 
 *    http://www.ssw.uni-linz.ac.at/Coco/#CS
 *    http://www.scifac.ru.ac.za/coco/cshcoco.htm
 *
 * GENERAL PERCEPTORS
 * 
 * GyroRate Perceptor
 *    Format:  (GYR (n <name>) (rt <x> <y> <z>))
 *    Example: (GYR (n torso) (rt 0.01 0.07 0.46))
 *    These angles describe orientation of the body with respect to the global coordinate system.
 * HingeJoint Perceptor
 *    Format:  (HJ (n <name>) (ax <ax>))
 *    Example: (HJ (n laj3) (ax -1.02))
 *    Zero degrees means straightly aligned
 * UniversalJoint Perceptor
 *    Format:  (UJ (n <name>) (ax1 <ax1>) (ax2 <ax2>))
 *    Example: (UJ (n laj1) (ax1 -1.32) (ax2 2.00))
 *    Zero degrees means straightly aligned
 * Touch Perceptor
 *    Format:  (TCH n <name> val 0|1)
 *    Example: (TCH n bumper val 1)
 * ForceResistance Perceptor
 *    Format:  (FRP (n <name>) (c <px> <py> <pz>) (f <fx> <fy> <fz>))
 *    Example: (FRP (n lf) (c -0.14 0.08 -0.05) (f 1.12 -0.26 13.07))
 *    Currently only available in feet (lf/rf).  Point on body of force, with force itself.
 * Accelerometer
 *    Format:  (ACC (n <name>) (a <x> <y> <z>))
 *    Example: (ACC (n torso) (a 0.00 0.00 9.81))
 * 
 * SOCCER PERCEPTORS
 * 
 * Vision Perceptor
 *    Format:  (See (<name> (pol <distance> <angle1> <angle2>))
 *                  (P (team <teamname>) (id <playerID>) (pol <distance> <angle1> <angle2>))
 *             )
 *    Example: (See (F1L (pol 19.11 111.69 -9.57))
 *                  (F2L (pol 16.41 -115.88 -11.15))
 *                  (F1R (pol 46.53 22.04 -3.92))
 *                  (F2R (pol 45.49 -18.74 -4.00))
 *                  (G1L (pol 9.88 139.29 -21.07))
 *                  (G2L (pol 8.40 -156.91 -25.00))
 *                  (G1R (pol 43.56 7.84 -4.68))
 *                  (G2R (pol 43.25 -4.10 -4.71))
 *                  (B (pol 18.34 4.66 -9.90))
 *                  (P (team RoboLog) (id 1) (pol 37.50 16.15 -0.00))
 *             )
 * GameState Perceptor
 *    Format:  (GS (t <time>) (pm <playmode>))
 *    Example: (GS (t 0.00) (pm BeforeKickOff))
 *    Simulation time, starting at zero for kickoff of either half.
 *    First time this message arrives, it includes information about ball weight and field size.
 *    Possible playmodes (from ./plugin/soccer/soccertypes.h):
 *        "BeforeKickOff", "KickOff Left", "KickOff Right", "PlayOn", "KickIn Left", "KickIn Right",
 *        "corner kick left", "corner kick right", "goal kick left", "goal kick right", "offside left",
 *        "offside right", "GameOver", "Goal Left", "Goal Right", "free kick left", "free kick right", "unknown"
 * AgentState Perceptor
 *    Format:  (AgentState (temp <degree>) (battery <percentile>))
 *    Example: (AgentState (temp 48) (battery 75))
 * Hear Perceptor
 *       Format:  (hear <time> 'self'|<direction> <message>)
 *    Example: (hear 12.3 self ``helloworld'')
 *    Message may consist of characters from the ASCII printing
 *    character subset [0x20; 0x7E], among which the alphanumerical symbols and mathematical
 *    operators can be found for example. Three characters from this range are, however, excluded:
 *    the white space character and the normal brackets ( and ).
 *    Messages are restricted to a maximal length (currently 20 bytes).
 *    Messages shouted from beyond a maximal distance (currently 50:0 meters) cannot be heard.
 *    Each player has the maximal capacity of one heard message by a specific team every two sensor cycles (thus every 0:4 seconds per team).
 */

    using System.Collections.Generic;

COMPILER Perceptors

    // MUST BE SET BY USER OF PARSER
    public string TeamName;
    
    private TimeSpan SimulationTime = System.TimeSpan.Zero;
    private TimeSpan GameTime = System.TimeSpan.Zero;
    private PlayMode PlayMode = PlayMode.Unknown;
    private FieldSide TeamSide = FieldSide.Unknown;
    private int? PlayerId;
    private double? AgentTemperature;
    private double? AgentBattery;
    private List<GyroState> GyroStates;
    private List<AccelerometerState> AccelerometerStates;
    private List<HingeState> HingeStates;
    private List<UniversalJointState> UniversalJointStates;
    private List<TouchState> TouchStates;
    private List<ForceState> ForceStates;
    private List<LandmarkPosition> LandmarkPositions;
    private List<PlayerPosition> TeamMatePositions;
    private List<PlayerPosition> OppositionPositions;
    private Polar? BallPosition;
    private List<HeardMessage> Messages;
    
    public PerceptorState State { get; private set; }

    private double AsDouble(string s) {
        double d;
        if (!double.TryParse(s, out d))
            SemErr("Unable to convert \"" + s + "\" to a double.");
        return d;
    }

    private void SeeLandmark(Polar pos, Landmark landmark) {
        if (LandmarkPositions==null)
            LandmarkPositions = new List<LandmarkPosition>(4);
        LandmarkPositions.Add(new LandmarkPosition(landmark, pos));
    }
    
CHARACTERS

    letter = 'A'..'Z' + 'a'..'z' .
    digit = "0123456789" .
    messageChar = '\u0020'..'\u007e' - ' ' - '(' - ')' - digit - letter .

TOKENS

    double = ['-'] digit { digit } [ '.' digit { digit } ] .
    ident = letter { letter | digit | '_' } .
    message = '\'' messageChar { messageChar } '\'' .

PRODUCTIONS

//////////////////////// TYPES

Double<out double d> = double               (. d = AsDouble(t.val); .)
    .
    
AngleInDegrees<out Angle a> = double        (. a = Angle.FromDegrees(AsDouble(t.val)); .)
    .
    
Ident<out string s> = ident                 (. s = t.val; .)
    .

TimeSpan<out TimeSpan time> =               (. double secs; .)
    Double<out secs>                        (. time = System.TimeSpan.FromSeconds(secs); .)
    .

Vector3<out Vector3 v> =                        (. double x, y, z; .)
    Double<out x> Double<out y> Double<out z>   (. v = new Vector3(x, y, z); .)
    .

Polar<out Polar pos> =                          (. double distance, angle1, angle2; .)
    Double<out distance> Double<out angle1> Double<out angle2>   
                                                (. pos = new Polar(distance, Angle.FromDegrees(angle1), Angle.FromDegrees(angle2)); .)
    .

IntFlag<out bool isSet> =                       (. double d; .)
    Double<out d>                               (. isSet = d != 0; .)
    .

PolarPosExpr<out Polar pos> =
    "(pol" Polar<out pos> ')'
    .

MessageText<out string m> = ident               (. m = t.val; .)
    .

//////////////////////// SERVER PERCEPTOR EXPRESSIONS
    
// (time (now 417.67))
TimeExpr<out TimeSpan time> =
    "(time" '(' "now" TimeSpan<out time> ')' ')'
    .

// (GS (t 0.00) (pm BeforeKickOff))
// (GS (unum 1) (team left) (t 0.00) (pm BeforeKickOff))
GameStateExpr<out TimeSpan time, out PlayMode playMode, out int? playerId, out FieldSide? teamSide> =
    "(GS"                                        (. string pmStr; double playerIdDbl; playerId = null; teamSide = null; .)
        [
            "(unum" Double<out playerIdDbl> ')'  (. playerId = (int)playerIdDbl; .)
        ]
        [
            "(team" [
                  "left"                         (. teamSide = FieldSide.Left; .)
                | "right"                        (. teamSide = FieldSide.Right; .)
            ] ')'
        ]
          '(' 't' TimeSpan<out time> ')'
          '(' "pm" Ident<out pmStr> ')'          (. if (!PlayModeUtil.TryParse(pmStr, out playMode))
                                                        SemErr("Unable to parse play mode '" + pmStr +"'.");;
                                                  .)
    ')'
    .

// (GYR (n torso) (rt 0.00 -0.00 0.00))
GyroStateExpr<out GyroState gyroState> =        (. string label; double x,y,z; .)
    "(GYR" '(' 'n' Ident<out label> ')'
           '(' "rt" Double<out x> 
                    Double<out y> 
                    Double<out z> ')' ')'       (. gyroState = new GyroState(label, x, y, z); .)
    .

// (ACC (n torso) (a 0.00 -0.05 8.83))
AccelerometerStateExpr<out AccelerometerState accState> = (. string label; Vector3 v; .)
    "(ACC" '(' 'n' Ident<out label> ')'
           '(' 'a' Vector3<out v> ')' ')'       (. accState = new AccelerometerState(label, v); .)
    .

// (HJ (n hj1) (ax 0.00))
HingeJointExpr<out HingeState hj> =                (. string label; Angle angle; .)
    "(HJ" '(' 'n' Ident<out label> ')'
          '(' "ax" AngleInDegrees<out angle> ')' ')'    (. hj = new HingeState(label, angle); .)
    .

// (UJ (n laj1 2) (ax1 -1.32) (ax2 2.00))
UniversalJointExpr<out UniversalJointState uj> =        (. string label; Angle angle1, angle2; .)
    "(UJ" '(' 'n' Ident<out label> ')'
          '(' "ax1" AngleInDegrees<out angle1> ')'
          '(' "ax2" AngleInDegrees<out angle2> ')' ')'  (. uj = new UniversalJointState(label, angle1, angle2); .)
    .

// (TCH n bumper val 1)
TouchStateExpr<out TouchState ts> =                 (. string label; bool isTouching; .)
    "(TCH" 'n' Ident<out label>
          "val" IntFlag<out isTouching> ')'         (. ts = new TouchState(label, isTouching); .)
    .

// (FRP (n lf) (c -0.14 0.08 -0.05) (f 1.12 -0.26 13.07))
ForceStateExpr<out ForceState fs> =                 (. string label; Vector3 point, force; .)
    "(FRP" '(' 'n' Ident<out label> ')'
           '(' 'c' Vector3<out point> ')'
           '(' 'f' Vector3<out force> ')'
    ')'                                             (. fs = new ForceState(label, point, force); .)
    .
    
// (AgentState (temp 48) (battery 75))
AgentStateExpr<out double temp, out double battery> =
    "(AgentState" '(' "temp" Double<out temp> ')'
                  '(' "battery" Double<out battery> ')'
    ')'
    .
    
// (See (F1L (pol 11.52 52.16 -8.16))
//      (F1R (pol 11.51 -52.23 -8.25))
//      (G1L (pol 9.88 139.29 -21.07))
//      (B (pol 1.89 -0.00 -57.87))
//      (P (team RoboLog) (id 1) (pol 37.50 16.15 -0.00))
// )
SeeExpr =
    "(See"
        { '(' [VisibleItemExpr | PlayerExpr] ')' }
    ')'
    .

VisibleItemExpr =                           (. string label = la.val; Polar pos; .)
        { "F1L" | "F2L" | "F1R" | "F2R" | "G1L" | "G2L" | "G1R" | "G2R" | "B" }
        PolarPosExpr<out pos>
                                             (. switch (label) {
                                                    case "F1L": SeeLandmark(pos, Landmark.FlagLeftTop); break;
                                                    case "F2L": SeeLandmark(pos, Landmark.FlagLeftBottom); break;
                                                    case "F1R": SeeLandmark(pos, Landmark.FlagRightTop); break;
                                                    case "F2R": SeeLandmark(pos, Landmark.FlagRightBottom); break;
                                                    case "G1L": SeeLandmark(pos, Landmark.GoalLeftTop); break;
                                                    case "G2L": SeeLandmark(pos, Landmark.GoalLeftBottom); break;
                                                    case "G1R": SeeLandmark(pos, Landmark.GoalRightTop); break;
                                                    case "G2R": SeeLandmark(pos, Landmark.GoalRightBottom); break;
                                                    case "B":   BallPosition = pos; break;
                                                    default: SemErr("Unable to parse visible item type string '"+label+"'."); return;
                                                }
                                            .)
    .

//(P (team RoboLog) (id 1) (pol 37.50 16.15 -0.00))
PlayerExpr =
                                             (. 
                                                string teamName; 
                                                double playerId;
                                                var parts = new List<BodyPartPosition>();
                                              .)
        "P"
        "(team" Ident<out teamName> ')'
        "(id" Double<out playerId> ')'
        {
                                            (. string partLabel; Polar pos; .)
            '(' Ident<out partLabel>            
            PolarPosExpr<out pos> ')'       (. parts.Add(new BodyPartPosition(partLabel, pos)); .)
        }
                                            (. bool isTeamMate = string.Equals(teamName, TeamName, StringComparison.Ordinal);
                                               var player = new PlayerPosition(isTeamMate, (int)playerId, parts);
                                               if (isTeamMate) {
                                                   if (TeamMatePositions==null) TeamMatePositions = new List<PlayerPosition>(4);
                                                   TeamMatePositions.Add(player);
                                               } else {
                                                   if (OppositionPositions==null) OppositionPositions = new List<PlayerPosition>(4);
                                                   OppositionPositions.Add(player);
                                               }
                                             .)
    .
    
// (hear <time> 'self'|<direction> <message>)
//       Format:  (hear <time> 'self'|<direction> <message>)
//    Example: (hear 12.3 self ``helloworld'')
//    Message may consist of characters from the ASCII printing
//    character subset [0x20; 0x7E], among which the alphanumerical symbols and mathematical
//    operators can be found for example. Three characters from this range are, however, excluded:
//    the white space character and the normal brackets ( and ).
//    Messages are restricted to a maximal length (currently 20 bytes).
HearExpr<out HeardMessage message> =                (. TimeSpan time; Angle direction = Angle.NaN; string messageText; .)
    "(hear" 
        TimeSpan<out time>
        ( "self" | AngleInDegrees<out direction> )
        MessageText<out messageText>
    ')'                                             (. message = new HeardMessage(time, direction, new Message(messageText.Trim('\''))); .)
    .

Perceptors =
    { 
                                                (. TimeSpan t; .)
        TimeExpr<out t>                         (. SimulationTime = t; .)
      |                                         (. TimeSpan t; PlayMode pm; int? id; FieldSide? side; .)
        GameStateExpr<out t, out pm, 
                      out id, out side>         (. GameTime = t; PlayMode = pm; PlayerId = id; 
                                                   if (side.HasValue) TeamSide = side.Value; .)
      |                                         (. double t, b; .)
        AgentStateExpr<out t, out b>            (. AgentTemperature = t; AgentBattery = b; .)
      |                                         (. if (GyroStates==null) GyroStates = new List<GyroState>(1); GyroState gyroState; .)
        GyroStateExpr<out gyroState>            (. GyroStates.Add(gyroState); .)
      |                                         (. if (AccelerometerStates==null) AccelerometerStates = new List<AccelerometerState>(1); AccelerometerState accState; .)
        AccelerometerStateExpr<out accState>    (. AccelerometerStates.Add(accState); .)
      |                                         (. if (HingeStates==null) HingeStates = new List<HingeState>(1); HingeState hjState; .)
        HingeJointExpr<out hjState>             (. HingeStates.Add(hjState); .)
      |                                         (. if (UniversalJointStates==null) UniversalJointStates = new List<UniversalJointState>(1); UniversalJointState ujState; .)
        UniversalJointExpr<out ujState>         (. UniversalJointStates.Add(ujState); .)
      |                                         (. if (TouchStates==null) TouchStates = new List<TouchState>(1); TouchState tState; .)
        TouchStateExpr<out tState>              (. TouchStates.Add(tState); .)
      |                                         (. if (ForceStates==null) ForceStates = new List<ForceState>(1); ForceState fState; .)
        ForceStateExpr<out fState>              (. ForceStates.Add(fState); .)
      | SeeExpr
      |                                         (. if (Messages==null) Messages = new List<HeardMessage>(1); HeardMessage message; .)
        HearExpr<out message>                   (. Messages.Add(message); .)
    }

    (.
        State = new PerceptorState(
                              SimulationTime, GameTime, PlayMode, TeamSide, PlayerId, 
                              GyroStates, HingeStates, UniversalJointStates,
                              TouchStates, ForceStates, AccelerometerStates,
                              LandmarkPositions, TeamMatePositions, OppositionPositions, BallPosition,
                              AgentBattery, AgentTemperature, Messages);
     .)
    .

END Perceptors.